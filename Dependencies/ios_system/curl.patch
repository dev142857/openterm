diff -Naur curl-105/config_iphone/curl_config.h curl/config_iphone/curl_config.h
--- curl-105/config_iphone/curl_config.h	2017-05-24 02:47:37.000000000 +0200
+++ curl/config_iphone/curl_config.h	2017-12-09 00:12:58.000000000 +0100
@@ -410,6 +410,7 @@
 
 /* Define to 1 if you have the <libssh2.h> header file. */
 /* #undef HAVE_LIBSSH2_H */
+#define HAVE_LIBSSH2_H 1
 
 /* Define to 1 if you have the `ssl' library (-lssl). */
 /* #undef HAVE_LIBSSL */
@@ -801,6 +802,7 @@
 
 /* cpu-machine-OS */
 /* #undef OS */
+#define OS "iPhoneOS"
 
 /* Name of package */
 #define PACKAGE "curl"
@@ -952,6 +954,7 @@
 
 /* if libSSH2 is in use */
 /* #undef USE_LIBSSH2 */
+#define USE_LIBSSH2 
 
 /* If you want to build curl with the built-in manual */
 #define USE_MANUAL 1
@@ -963,7 +966,7 @@
 /* #undef USE_METALINK */
 
 /* if nghttp2 is in use */
-#define USE_NGHTTP2 1
+// #define USE_NGHTTP2 1
 
 /* if NSS is enabled */
 /* #undef USE_NSS */
diff -Naur curl-105/curl/include/curl/curl.h curl/curl/include/curl/curl.h
--- curl-105/curl/include/curl/curl.h	2017-05-17 21:04:33.000000000 +0200
+++ curl/curl/include/curl/curl.h	2017-12-09 00:12:58.000000000 +0100
@@ -2391,7 +2391,7 @@
                            callback functions */
   CURLSHOPT_LAST  /* never use */
 } CURLSHoption;
-
+    
 CURL_EXTERN CURLSH *curl_share_init(void);
 CURL_EXTERN CURLSHcode curl_share_setopt(CURLSH *, CURLSHoption option, ...);
 CURL_EXTERN CURLSHcode curl_share_cleanup(CURLSH *);
diff -Naur curl-105/curl/lib/netrc.c curl/curl/lib/netrc.c
--- curl-105/curl/lib/netrc.c	2016-11-04 22:42:50.000000000 +0100
+++ curl/curl/lib/netrc.c	2017-12-09 00:12:58.000000000 +0100
@@ -69,7 +69,8 @@
 
   if(!netrcfile) {
     bool home_alloc = FALSE;
-    char *home = curl_getenv("HOME"); /* portable environment reader */
+    char *home = curl_getenv("CURL_HOME"); /* portable environment reader */
+    if (!home) home = curl_getenv("HOME"); /* portable environment reader */
     if(home) {
       home_alloc = TRUE;
 #if defined(HAVE_GETPWUID_R) && defined(HAVE_GETEUID)
diff -Naur curl-105/curl/lib/ssh.c curl/curl/lib/ssh.c
--- curl-105/curl/lib/ssh.c	2017-05-17 21:04:33.000000000 +0200
+++ curl/curl/lib/ssh.c	2017-12-11 17:22:53.000000000 +0100
@@ -26,6 +26,13 @@
 
 #ifdef USE_LIBSSH2
 
+// If we have Blinkshell, we use their key management:
+#ifdef BLINKSHELL
+#import "BKDefaults.h"
+#import "BKHosts.h"
+#import "BKPubKey.h"
+#endif
+
 #ifdef HAVE_LIMITS_H
 #  include <limits.h>
 #endif
@@ -714,6 +721,26 @@
   int err;
   int seekerr = CURL_SEEKFUNC_OK;
   *block = 0; /* we're not blocking by default */
+  //  data->set.verbose = true;
+#ifdef BLINKSHELL // Blinkshell generates keys and stores them
+    // Blinkshell: did we find the keys in the KeyChain?
+    char *publicKeyMemory = NULL;
+    char *privateKeyMemory = NULL;
+    BKHosts *host;
+    BKPubKey *pk;
+    
+    if (host = [BKHosts withHost:[NSString stringWithUTF8String:conn->host.name]]) {
+        // Extract private key, username, etc associated with this host:
+        // This won't work, we've used conn->host.name several times before
+        if (host.hostName) conn->host.name = [host.hostName UTF8String];
+        if ((!conn->user || (strlen(conn->user) == 0))
+            && [host.user length]) {
+            Curl_safefree(conn->user);
+            conn->user = strdup([host.user UTF8String]);
+            fprintf(stderr, "Found user = %s, host = %s\n", conn->user, conn->host.name);
+        }
+    }
+#endif
 
   do {
 
@@ -810,11 +837,59 @@
 
         /* To ponder about: should really the lib be messing about with the
            HOME environment variable etc? */
-        home = curl_getenv("HOME");
-
+          // iOS specifics: $HOME/.ssh is unreadable (sandbox), we store keys in ~/Documents/.ssh/
+          home = curl_getenv("SSH_HOME");
+          if (!home) home = curl_getenv("HOME");
+
+          // iOS secure storing options (key, username, password)
+          // Find the private key:
+          // a) if the user specified a private key, use it:
         if(data->set.str[STRING_SSH_PRIVATE_KEY])
-          sshc->rsa = strdup(data->set.str[STRING_SSH_PRIVATE_KEY]);
+          sshc->rsa = strdup(data->set.str[STRING_SSH_PRIVATE_KEY]); // it's a string
         else {
+#ifdef BLINKSHELL
+            // b) if running inside Blinkshell, use their storage options:
+          if (host) {
+              if (!sshc->passphrase && host.password) sshc->passphrase = [host.password UTF8String];
+              // Find the stored key that corresponds to the key name:
+              publicKeyMemory = NULL; privateKeyMemory = NULL;
+              if (data->set.str[STRING_SSH_PRIVATE_KEY]) {
+                  // Priority 1: user specified a key name, different from default
+                  // key associated with this hostname
+                  if ((pk = [BKPubKey withID:[NSString stringWithUTF8String:data->set.str[STRING_SSH_PRIVATE_KEY]]]) != nil) {
+                      publicKeyMemory = [pk.publicKey UTF8String];
+                      privateKeyMemory = [pk.privateKey UTF8String];
+                      sshc->rsa = data->set.str[STRING_SSH_PRIVATE_KEY];
+                  }
+              }
+              if (!(privateKeyMemory && publicKeyMemory)) {
+                  // Priority 2: default key associated with the host
+                  if (host.key) {
+                      if ((pk = [BKPubKey withID:host.key]) != nil) {
+                          publicKeyMemory = [pk.publicKey UTF8String];
+                          privateKeyMemory = [pk.privateKey UTF8String];
+                          sshc->rsa = strdup(host.key.UTF8String);
+                      }
+                  }
+              }
+              if (!(privateKeyMemory && publicKeyMemory)) {
+                  // Priority 2: key named id_rsa:
+                  if ((pk = [BKPubKey withID:@"id_rsa"]) != nil) {
+                      publicKeyMemory = [pk.publicKey UTF8String];
+                      privateKeyMemory = [pk.privateKey UTF8String];
+                      sshc->rsa = strdup("id_rsa");
+                  }
+              }
+              if (!(privateKeyMemory && publicKeyMemory)) {
+                  // Still no luck, try with id_dsa:
+                  if ((pk = [BKPubKey withID:@"id_dsa"]) != nil) {
+                      publicKeyMemory = [pk.publicKey UTF8String];
+                      privateKeyMemory = [pk.privateKey UTF8String];
+                      sshc->rsa = strdup("id_dsa");
+                  }
+              }
+          } else {
+#endif
           /* If no private key file is specified, try some common paths. */
           if(home) {
             /* Try ~/.ssh first. */
@@ -831,6 +906,9 @@
               }
             }
           }
+#ifdef BLINKSHELL
+          }
+#endif
           if(!out_of_memory && !sshc->rsa) {
             /* Nothing found; try the current dir. */
             sshc->rsa = strdup("id_rsa");
@@ -852,6 +930,9 @@
          * libssh2 extract the public key from the private key file.
          * This is done by simply passing sshc->rsa_pub = NULL.
          */
+#ifdef BLINKSHELL
+            if (!(privateKeyMemory && publicKeyMemory)) {
+#endif
         if(data->set.str[STRING_SSH_PUBLIC_KEY]
             /* treat empty string the same way as NULL */
             && data->set.str[STRING_SSH_PUBLIC_KEY][0]) {
@@ -859,6 +940,9 @@
           if(!sshc->rsa_pub)
             out_of_memory = TRUE;
         }
+#ifdef BLINKSHELL
+            }
+#endif
 
         if(out_of_memory || sshc->rsa == NULL) {
           free(home);
@@ -869,15 +953,22 @@
           break;
         }
 
-        sshc->passphrase = data->set.ssl.key_passwd;
-        if(!sshc->passphrase)
-          sshc->passphrase = "";
+        if (!sshc->passphrase) sshc->passphrase = data->set.ssl.key_passwd;
+        if (!sshc->passphrase) sshc->passphrase = "";
 
         free(home);
 
+#ifdef BLINKSHELL
+            if (!(privateKeyMemory && publicKeyMemory)) {
+#endif
         if(sshc->rsa_pub)
           infof(data, "Using SSH public key file '%s'\n", sshc->rsa_pub);
         infof(data, "Using SSH private key file '%s'\n", sshc->rsa);
+#ifdef BLINKSHELL
+            } else {
+                infof(data, "Using private key stored in BlinkShell keys: '%s'\n", sshc->rsa);
+            }
+#endif
 
         state(conn, SSH_AUTH_PKEY);
       }
@@ -889,12 +980,25 @@
     case SSH_AUTH_PKEY:
       /* The function below checks if the files exists, no need to stat() here.
        */
-      rc = libssh2_userauth_publickey_fromfile_ex(sshc->ssh_session,
+#ifdef BLINKSHELL
+          if (!(privateKeyMemory && publicKeyMemory))
+#endif
+      while ((rc = libssh2_userauth_publickey_fromfile_ex(sshc->ssh_session,
                                                   conn->user,
                                                   curlx_uztoui(
                                                     strlen(conn->user)),
                                                   sshc->rsa_pub,
-                                                  sshc->rsa, sshc->passphrase);
+                                                  sshc->rsa, sshc->passphrase))  == LIBSSH2_ERROR_EAGAIN) ;
+#ifdef BLINKSHELL
+          else
+              while ((rc = libssh2_userauth_publickey_frommemory(sshc->ssh_session,
+                                                                 conn->user,
+                                                                 curlx_uztoui(
+                                                                              strlen(conn->user)),
+                                                                 publicKeyMemory, strlen(publicKeyMemory),
+                                                                 privateKeyMemory, strlen(privateKeyMemory),
+                                                                 sshc->passphrase)) == LIBSSH2_ERROR_EAGAIN);
+#endif
       if(rc == LIBSSH2_ERROR_EAGAIN) {
         break;
       }
diff -Naur curl-105/curl/src/tool_main.c curl/curl/src/tool_main.c
--- curl-105/curl/src/tool_main.c	2016-07-06 23:44:05.000000000 +0200
+++ curl/curl/src/tool_main.c	2017-12-09 00:12:58.000000000 +0100
@@ -229,7 +229,11 @@
 /*
 ** curl tool main function.
 */
-int main(int argc, char *argv[])
+#ifdef BLINKSHELL
+int curl_static_main(int argc, char *argv[])
+#else
+int curl_main(int argc, char *argv[])
+#endif
 {
   CURLcode result = CURLE_OK;
   struct GlobalConfig global;
diff -Naur curl-105/curl/src/tool_operate.c curl/curl/src/tool_operate.c
--- curl-105/curl/src/tool_operate.c	2017-05-17 21:04:33.000000000 +0200
+++ curl/curl/src/tool_operate.c	2017-12-09 00:12:58.000000000 +0100
@@ -41,6 +41,9 @@
 
 #include "strcase.h"
 
+// iOS:
+#import <Foundation/Foundation.h>
+
 #define ENABLE_CURLX_PRINTF
 /* use our own printf() functions */
 #include "curlx.h"
@@ -1167,7 +1170,15 @@
             result = CURLE_OUT_OF_MEMORY;
             home = homedir();
             if(home) {
-              file = aprintf("%s/%sssh/known_hosts", home, DOT_CHAR);
+                // iOS: read the known_hosts file in ~/Documents/known_hosts
+                NSURL *dd = [[[NSFileManager defaultManager] URLsForDirectory:NSDocumentDirectory inDomains:NSUserDomainMask] firstObject];
+                NSURL *khURL = [dd URLByAppendingPathComponent:@"known_hosts"];
+                if ([[NSFileManager defaultManager] fileExistsAtPath:[khURL path]]) {
+                    // Check if file exists, otherwise revert to $HOME/.ssh/known_hosts
+                    file = aprintf("%s", [khURL.path UTF8String]);
+                }
+                else
+                    file = aprintf("%s/%sssh/known_hosts", home, DOT_CHAR);
               if(file) {
                 /* new in curl 7.19.6 */
                 result = res_setopt_str(curl, CURLOPT_SSH_KNOWNHOSTS, file);
