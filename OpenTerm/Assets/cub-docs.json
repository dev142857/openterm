{"items":[{"rawDocumentation":"\/\/\/ The mathematical constant pi.","title":"pi","type":{"variable":{"name":"pi","description":"The mathematical constant pi."}},"definition":"pi"},{"rawDocumentation":"\/\/\/ The mathematical constant tau, which equals 2*pi.","title":"tau","type":{"variable":{"name":"tau","description":"The mathematical constant tau, which equals 2*pi."}},"definition":"tau"},{"rawDocumentation":"\/\/\/ - Parameter x: A number.\n\/\/\/ - Returns: The absolute value of x.","title":"abs(x) returns","type":{"function":{"arguments":["x"],"argumentDescriptions":{"x":"A number."},"returnDescription":"The absolute value of x.","returns":true,"name":"abs"}},"definition":"func abs(x) returns"},{"rawDocumentation":"\/\/\/ - Parameter a: A number to compare.\n\/\/\/ - Parameter b: Another number to compare.\n\/\/\/ - Returns: The lesser of a and b.","title":"min(a, b) returns","type":{"function":{"arguments":["a","b"],"argumentDescriptions":{"b":"Another number to compare.","a":"A number to compare."},"returnDescription":"The lesser of a and b.","returns":true,"name":"min"}},"definition":"func min(a, b) returns"},{"rawDocumentation":"\/\/\/ - Parameter a: A number to compare.\n\/\/\/ - Parameter b: Another number to compare.\n\/\/\/ - Returns: The greater of a and b.","title":"max(a, b) returns","type":{"function":{"arguments":["a","b"],"argumentDescriptions":{"b":"Another number to compare.","a":"A number to compare."},"returnDescription":"The greater of a and b.","returns":true,"name":"max"}},"definition":"func max(a, b) returns"},{"rawDocumentation":"\/\/\/ - Parameter x: a number.\n\/\/\/ - Returns: wether x is positive.","title":"isPositive(x) returns","type":{"function":{"arguments":["x"],"argumentDescriptions":{"x":"a number."},"returnDescription":"wether x is positive.","returns":true,"name":"isPositive"}},"definition":"func isPositive(x) returns"},{"rawDocumentation":"\/\/\/ - Parameter x: a number.\n\/\/\/ - Returns: wether x is negative.","title":"isNegative(x) returns","type":{"function":{"arguments":["x"],"argumentDescriptions":{"x":"a number."},"returnDescription":"wether x is negative.","returns":true,"name":"isNegative"}},"definition":"func isNegative(x) returns"},{"rawDocumentation":"\/\/\/ - Parameter x: a number.\n\/\/\/ - Returns: wether x is even.","title":"isEven(x) returns","type":{"function":{"arguments":["x"],"argumentDescriptions":{"x":"a number."},"returnDescription":"wether x is even.","returns":true,"name":"isEven"}},"definition":"func isEven(x) returns"},{"rawDocumentation":"\/\/\/ - Parameter x: a number.\n\/\/\/ - Returns: wether x is uneven.","title":"isUneven(x) returns","type":{"function":{"arguments":["x"],"argumentDescriptions":{"x":"a number."},"returnDescription":"wether x is uneven.","returns":true,"name":"isUneven"}},"definition":"func isUneven(x) returns"},{"rawDocumentation":"\/\/\/ - Parameter n: the root.\n\/\/\/ - Parameter x: a number.\n\/\/\/ - Returns: the n-root of x.","title":"root(n, x) returns","type":{"function":{"arguments":["n","x"],"argumentDescriptions":{"x":"a number.","n":"the root."},"returnDescription":"the n-root of x.","returns":true,"name":"root"}},"definition":"func root(n, x) returns"},{"rawDocumentation":"\/\/\/ - Parameter x: a number.\n\/\/\/ - Returns: the square root of x.","title":"sqrt(x) returns","type":{"function":{"arguments":["x"],"argumentDescriptions":{"x":"a number."},"returnDescription":"the square root of x.","returns":true,"name":"sqrt"}},"definition":"func sqrt(x) returns"},{"rawDocumentation":"\/\/\/ - Parameter x: a number.\n\/\/\/ - Returns: the cube root of x.","title":"cbrt(x) returns","type":{"function":{"arguments":["x"],"argumentDescriptions":{"x":"a number."},"returnDescription":"the cube root of x.","returns":true,"name":"cbrt"}},"definition":"func cbrt(x) returns"},{"rawDocumentation":"\/\/\/ - Parameter x: dividend\n\/\/\/ - Parameter y: divisor\n\/\/\/ - Returns: remainder","title":"rem(x, y) returns","type":{"function":{"arguments":["x","y"],"argumentDescriptions":{"y":"divisor","x":"dividend"},"returnDescription":"remainder","returns":true,"name":"rem"}},"definition":"func rem(x, y) returns"},{"rawDocumentation":"\/\/\/ - Parameter x: dividend\n\/\/\/ - Parameter y: divisor\n\/\/\/ - Returns: modulus","title":"mod(x, y) returns","type":{"function":{"arguments":["x","y"],"argumentDescriptions":{"y":"divisor","x":"dividend"},"returnDescription":"modulus","returns":true,"name":"mod"}},"definition":"func mod(x, y) returns"},{"rawDocumentation":"\/\/\/ - Parameter x: a number.\n\/\/\/ - Returns: the greatest whole number less than x.","title":"floor(x) returns","type":{"function":{"arguments":["x"],"argumentDescriptions":{"x":"a number."},"returnDescription":"the greatest whole number less than x.","returns":true,"name":"floor"}},"definition":"func floor(x) returns"},{"rawDocumentation":"\/\/\/ - Parameter x: a number.\n\/\/\/ - Returns: the rounded value of x","title":"round(x) returns","type":{"function":{"arguments":["x"],"argumentDescriptions":{"x":"a number."},"returnDescription":"the rounded value of x","returns":true,"name":"round"}},"definition":"func round(x) returns"},{"rawDocumentation":"\/\/\/ A struct that stores color data in RGBA.\n\/\/\/ - r: the red component, in range 0...1\n\/\/\/ - g: the green component, in range 0...1\n\/\/\/ - b: the blue component, in range 0...1\n\/\/\/ - a: the alpha component, in range 0...1","title":"Color(r, g, b, a)","type":{"struct":{"memberDescriptions":{"r":"the red component, in range 0...1","b":"the blue component, in range 0...1","g":"the green component, in range 0...1","a":"the alpha component, in range 0...1"},"name":"Color","members":["r","g","b","a"],"description":"A struct that stores color data in RGBA."}},"definition":"struct Color(r, g, b, a)"},{"rawDocumentation":"\/\/\/ Color convenience init.","title":"rgb(r, g, b) returns","type":{"function":{"arguments":["r","g","b"],"argumentDescriptions":{},"returns":true,"name":"rgb","description":"Color convenience init."}},"definition":"func rgb(r, g, b) returns"},{"rawDocumentation":"\/\/\/ Color convenience init.","title":"rgba(r, g, b, a) returns","type":{"function":{"arguments":["r","g","b","a"],"argumentDescriptions":{},"returns":true,"name":"rgba","description":"Color convenience init."}},"definition":"func rgba(r, g, b, a) returns"},{"rawDocumentation":"\/\/\/ A color value whose RGB values are 1.0, 0.0, and 0.0 and whose alpha value is 1.0.","title":"red","type":{"variable":{"name":"red","description":"A color value whose RGB values are 1.0, 0.0, and 0.0 and whose alpha value is 1.0."}},"definition":"red"},{"rawDocumentation":"\/\/\/ A color value whose RGB values are 0.0, 1.0, and 0.0 and whose alpha value is 1.0.","title":"green","type":{"variable":{"name":"green","description":"A color value whose RGB values are 0.0, 1.0, and 0.0 and whose alpha value is 1.0."}},"definition":"green"},{"rawDocumentation":"\/\/\/ A color value whose RGB values are 0.0, 0.0, and 1.0 and whose alpha value is 1.0.","title":"blue","type":{"variable":{"name":"blue","description":"A color value whose RGB values are 0.0, 0.0, and 1.0 and whose alpha value is 1.0."}},"definition":"blue"},{"rawDocumentation":"\/\/\/ A color value whose RGB values are 0.0, 1.0, and 1.0 and whose alpha value is 1.0.","title":"cyan","type":{"variable":{"name":"cyan","description":"A color value whose RGB values are 0.0, 1.0, and 1.0 and whose alpha value is 1.0."}},"definition":"cyan"},{"rawDocumentation":"\/\/\/ A color value whose RGB values are 1.0, 0.0, and 1.0 and whose alpha value is 1.0.","title":"magenta","type":{"variable":{"name":"magenta","description":"A color value whose RGB values are 1.0, 0.0, and 1.0 and whose alpha value is 1.0."}},"definition":"magenta"},{"rawDocumentation":"\/\/\/ A color value whose RGB values are 1.0, 1.0, and 0.0 and whose alpha value is 1.0.","title":"yellow","type":{"variable":{"name":"yellow","description":"A color value whose RGB values are 1.0, 1.0, and 0.0 and whose alpha value is 1.0."}},"definition":"yellow"},{"rawDocumentation":"\/\/\/ A color value whose RGB values are 0.0, 0.0, and 0.0 and whose alpha value is 1.0.","title":"black","type":{"variable":{"name":"black","description":"A color value whose RGB values are 0.0, 0.0, and 0.0 and whose alpha value is 1.0."}},"definition":"black"},{"rawDocumentation":"\/\/\/ A color value whose RGB values are 1.0, 1.0, and 1.0 and whose alpha value is 1.0.","title":"white","type":{"variable":{"name":"white","description":"A color value whose RGB values are 1.0, 1.0, and 1.0 and whose alpha value is 1.0."}},"definition":"white"},{"rawDocumentation":"\/\/\/ A color value whose RGB values are 0.0, 0.0, and 0.0 and whose alpha value is 0.0.","title":"clear","type":{"variable":{"name":"clear","description":"A color value whose RGB values are 0.0, 0.0, and 0.0 and whose alpha value is 0.0."}},"definition":"clear"},{"rawDocumentation":"Checks if the value is a struct.\n- Parameter value: the value to check the type of.\n- Returns: true if the value is a struct, false otherwise.","title":"isStruct(value) returns","type":{"function":{"arguments":["value"],"argumentDescriptions":{"value":"the value to check the type of."},"returnDescription":"true if the value is a struct, false otherwise.","returns":true,"name":"isStruct","description":"Checks if the value is a struct."}},"definition":"func isStruct(value) returns"},{"rawDocumentation":"Get a date (represented as a number), from a string in a specified format.\n\nExample:\nmyDate = dateFromFormat(\"2012-02-20\", \"yyyy-MM-dd\")\n\n- Parameter dateString: a date in a string format.\n- Parameter format: the format that the given date string is in.\n- Returns: a date.","title":"dateFromFormat(dateString, format) returns","type":{"function":{"arguments":["dateString","format"],"argumentDescriptions":{"format":"the format that the given date string is in.","dateString":"a date in a string format."},"returnDescription":"a date.","returns":true,"name":"dateFromFormat","description":"Get a date (represented as a number), from a string in a specified format.\nExample:\nmyDate = dateFromFormat(\"2012-02-20\", \"yyyy-MM-dd\")"}},"definition":"func dateFromFormat(dateString, format) returns"},{"rawDocumentation":"Get a formatted date (a string) from a date (represented as a number) in a specified format.\n\nExample:\nmyDate = currentDate()\nmyDateString = formattedDate(myDate, \"yyyy-MM-dd\")\n\n- Parameter date: a number representing a date.\n- Parameter format: the format to get the date in.\n- Returns: a string of the given date, formatted.","title":"formattedDate(date, format) returns","type":{"function":{"arguments":["date","format"],"argumentDescriptions":{"date":"a number representing a date.","format":"the format to get the date in."},"returnDescription":"a string of the given date, formatted.","returns":true,"name":"formattedDate","description":"Get a formatted date (a string) from a date (represented as a number) in a specified format.\nExample:\nmyDate = currentDate()\nmyDateString = formattedDate(myDate, \"yyyy-MM-dd\")"}},"definition":"func formattedDate(date, format) returns"},{"rawDocumentation":"Pause the script and continue when the user enters a string.\n- Returns: the string that the user entered.","title":"readLine() returns","type":{"function":{"arguments":[],"argumentDescriptions":{},"returnDescription":"the string that the user entered.","returns":true,"name":"readLine","description":"Pause the script and continue when the user enters a string."}},"definition":"func readLine() returns"},{"rawDocumentation":"Execute a shell command in the shell that the script is executed from.\n- Parameter command: The command to execute.\n- Returns: the exit code, 0 means no error.","title":"shell(command) returns","type":{"function":{"arguments":["command"],"argumentDescriptions":{"command":"The command to execute."},"returnDescription":"the exit code, 0 means no error.","returns":true,"name":"shell","description":"Execute a shell command in the shell that the script is executed from."}},"definition":"func shell(command) returns"},{"rawDocumentation":"Checks if the value is an array.\n- Parameter value: the value to check the type of.\n- Returns: true if the value is an array, false otherwise.","title":"isArray(value) returns","type":{"function":{"arguments":["value"],"argumentDescriptions":{"value":"the value to check the type of."},"returnDescription":"true if the value is an array, false otherwise.","returns":true,"name":"isArray","description":"Checks if the value is an array."}},"definition":"func isArray(value) returns"},{"rawDocumentation":"Get a random number.\n\nExample:\nmyDiceRoll = randomNumber(1, 6)\n\n- Parameter min: minimum number.\n- Parameter max: maximum number.\n- Returns: a random number.","title":"randomNumber(min, max) returns","type":{"function":{"arguments":["min","max"],"argumentDescriptions":{"min":"minimum number.","max":"maximum number."},"returnDescription":"a random number.","returns":true,"name":"randomNumber","description":"Get a random number.\nExample:\nmyDiceRoll = randomNumber(1, 6)"}},"definition":"func randomNumber(min, max) returns"},{"rawDocumentation":"Get a formatted string with an argument.\n\nExample:\nformattedNumber = format(\"%.f\", 1.0) \/\/ \"1\"\n\n- Parameter input: a string template.\n- Parameter arg: the argument to insert in the template.\n- Returns: a formatted string.","title":"format(input, arg) returns","type":{"function":{"arguments":["input","arg"],"argumentDescriptions":{"input":"a string template.","arg":"the argument to insert in the template."},"returnDescription":"a formatted string.","returns":true,"name":"format","description":"Get a formatted string with an argument.\nExample:\nformattedNumber = format(\"%.f\", 1.0) \/\/ \"1\""}},"definition":"func format(input, arg) returns"},{"rawDocumentation":"Pause the script and continue when the user enters a number.\n- Returns: the number that the user entered.","title":"readNumber() returns","type":{"function":{"arguments":[],"argumentDescriptions":{},"returnDescription":"the number that the user entered.","returns":true,"name":"readNumber","description":"Pause the script and continue when the user enters a number."}},"definition":"func readNumber() returns"},{"rawDocumentation":"Checks if the value is a string.\n- Parameter value: the value to check the type of.\n- Returns: true if the value is a string, false otherwise.","title":"isString(value) returns","type":{"function":{"arguments":["value"],"argumentDescriptions":{"value":"the value to check the type of."},"returnDescription":"true if the value is a string, false otherwise.","returns":true,"name":"isString","description":"Checks if the value is a string."}},"definition":"func isString(value) returns"},{"rawDocumentation":"Checks if the value is a boolean.\n- Parameter value: the value to check the type of.\n- Returns: true if the value is a boolean, false otherwise.","title":"isBool(value) returns","type":{"function":{"arguments":["value"],"argumentDescriptions":{"value":"the value to check the type of."},"returnDescription":"true if the value is a boolean, false otherwise.","returns":true,"name":"isBool","description":"Checks if the value is a boolean."}},"definition":"func isBool(value) returns"},{"rawDocumentation":"Add a specific amount of a date unit to a given date.\n\nExample:\nmyDate = currentDate()\ntomorrowThisTime = dateByAdding(1, \"day\", myDate)\n\n- Parameter value: the number that you want to add to the given date, in the given unit.\n- Parameter unit: a string that represents a date unit. One of the following values: \"second\", \"minute\", \"hour\", \"day\", \"month\", \"year\"\n- Parameter date: a number that represents a date.\n- Returns: a number representing the given date, having added the value in the specified unit.","title":"dateByAdding(value, unit, date) returns","type":{"function":{"arguments":["value","unit","date"],"argumentDescriptions":{"date":"a number that represents a date.","value":"the number that you want to add to the given date, in the given unit.","unit":"a string that represents a date unit. One of the following values: \"second\", \"minute\", \"hour\", \"day\", \"month\", \"year\""},"returnDescription":"a number representing the given date, having added the value in the specified unit.","returns":true,"name":"dateByAdding","description":"Add a specific amount of a date unit to a given date.\nExample:\nmyDate = currentDate()\ntomorrowThisTime = dateByAdding(1, \"day\", myDate)"}},"definition":"func dateByAdding(value, unit, date) returns"},{"rawDocumentation":"Get the current date and time, represented as a number.\n- Returns: a number representing the current date and time.","title":"currentDate() returns","type":{"function":{"arguments":[],"argumentDescriptions":{},"returnDescription":"a number representing the current date and time.","returns":true,"name":"currentDate","description":"Get the current date and time, represented as a number."}},"definition":"func currentDate() returns"},{"rawDocumentation":"Checks if the value is a number.\n- Parameter value: the value to check the type of.\n- Returns: true if the value is a number, false otherwise.","title":"isNumber(value) returns","type":{"function":{"arguments":["value"],"argumentDescriptions":{"value":"the value to check the type of."},"returnDescription":"true if the value is a number, false otherwise.","returns":true,"name":"isNumber","description":"Checks if the value is a number."}},"definition":"func isNumber(value) returns"},{"rawDocumentation":"Display something on screen.\n- Parameter input: the value you want to print.","title":"print(input) returns","type":{"function":{"arguments":["input"],"argumentDescriptions":{"input":"the value you want to print."},"returns":true,"name":"print","description":"Display something on screen."}},"definition":"func print(input) returns"},{"rawDocumentation":"An array of values that were passed to this script.","title":"parameters","type":{"variable":{"name":"parameters","description":"An array of values that were passed to this script."}},"definition":"parameters"}]}
